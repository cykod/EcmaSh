

The fun stuff:

== Hosting Story:

Store file prefix - everything before last .md for content nodes
if there is a processor that can process the extension 
tester.md -> tester
tester.js.sjs ->  tester.js
tester.html.haml -> tester.html

index.md -> index
index.html.md -> index.html

<!-- markdown  -->


index.json -> return list of files in that directory

index.md -> index -> autoindex file

style.css.scss
index.html
file.

== preprocess:

File Nodes: cannont be updated
ContentNode: turn file node into contentnode?

html: relative urls turn into cloudfront urls -> name_timestamp.jpg

delete old file, replace with new file

gsub - replace urls with cloudfront version

redis - multi fetch of cache keys of all the files

file nodes: on create


Eventually:
pre-process: split each file into "parts" - lookup all the parts in redis, stitch together and output.

Now:
gsub - each url gets fetched from redis / activerecord

== Paperclip rip out:

write files to S3 in directory pattern that matches 


== .data/.db  files? 

createdb mydb
mydb.db

read / write
/db/mydb - 
post /db/mydb { 
get /db/mydb/34156431263262346623163
/db/mydb/56264239064837285934597

== Forked node JS server running client side code w/o views

Run commands / do stuff  / insert into db (but with a valid key)

== pre-processing via .ejs files

index.html.ejs -> index.html (but ejs run on the fly)

== esh files

run client or server side

maybe use backtick to escape to straight JS code

get http://tester.com/something.json | `if($0.sunny) { return { ok: "weather" } }` > weather.json

need tokenizer - backticks get single token


add rendering support


== Blueprints

$ blueprint quintus-platformer platformer
- use a blueprint

$ blueprint-register quintus-platformer ./quintus-platformer
- register a blueprint

$ blueprint-update quintus-platformer ./quintus-platformer
- update a new version


== Multi-user editing

only let one user edit at a time - but let multiple users see the edits in realtime 

== Su support

login as another user w/ their password - work on group projects by sharing a user

== To Do 

6. Rip out paperclip




Editor:
=======

normal mode - save and quit

ToDo:
=====

esh files that run a bunch of commands [ store commands in a list of lists - pick of one command, pipe and then do the next.

add source command
set ENV variables

parsing options (-r)
multiple argumentsf
3. Figure out hosting / directory structure - .domain file
8. public / private directories
9. Add bing search api + JSON awk-type extractor
10. Deploy to digital ocean

ecmash

Create Jasmine tests for the models


JAWK 

{ result: [ { a: "b" }, { a: "c" } ] } -> ["b", "c" ]

cmd | pluck $$.result | map [ $$.a ] -> [ [ "b" ], [ "c" ]]



[ [ 0, 1, { a: 7 } ], [ 2, 4, { a: 8 } ] ] 

-> 1,4

cmd | map $$[2].a >> test.json





pipe pipes the actual JSON around - use JS to extract

JSH - js shell files that can be get or posted to on the domain

Hosting
=========
.txt, .css, .html and .js, .json and .csv served directly
everything else served via cloudfront


Commands


Drop images 

// page 100%,500px
// library "d3"
// require "something.css"
// require "tester.js"
// require "something.js"


- Drag and drop files up
- simple REST api:

?apikey=keyname

POST or PUT to /home/username/directory/something.txt
GET /home/username/directory - user's home directory has to be secret
DELETE /home/username

POST /commands/mv argv[] argv[] argv[] - returns status + JSON

// Access to a DB
POST /db/username/somthing
GET /db/username/something



CLI - Backbone models, some client only based cones (clear), some server based (mv, ls)
These translate to commands that just hit /commands/ with a session-based API key

====

help
libraries
js - execute javascript on the command line in it's own ENV
ls
mkdir
cd
mv 
cp
edit - codemirror with regular binding
vi - codemirror with vi keybindings
style
run
public - make a directory public
private - make a directory private (not listable, but files are viewable online, default)
secret - make a directory only accessible via an API key
vsplit - split into two console, left and right
hsplit - split into two consoles, top and bottom
close - close this console 
source - source a JS file into ECMAsh
echo - same as echo
clear - clear screen
refresh / clear env - clear the environment
quit - quit the shell
zoom - zoom in
unzoom - zoom out
apikey - return my api key (apikey create|expire)

eventually, git, ftp, apis, etc


tutorial - start a tutorial

.ecmarc - file that will run ECMAsh commands when you login
- checkbox to 


Pipes?
REST endpoint? 

var Command = Backbone.Model.extend({

});


var History // list of commands, some which have been executed


var Result // result of a command - 

var InteractiveResult // iframe interactive result of something

var Editor //  



// user can create own client side commands
ECMAsh.addCommand(ClientCommand.extend({ 

});




Features:
Guest Login
Registration
LocalStorage based 


