== README

Editor:
=======

normal mode - save and quit
track dirty?
theme
syntax highlighting


ToDo:
=====

Then:

3. Figure out hosting / directory structure - .domain file
4. Tab completion
5. up / down for history
6. mv command
7. cp command
8. public / private directories
9. Add bing search api + JSON awk-type extractor


Code Separation:
Ensure All JS Models work on Node.js & keeps all the business logic in the models and away from the views. Entire system should be runnable from JS console.

Move all top level functions to Shell model, e.g.: 
Shell.run("cd tester",callback);
Shell.runCommand("cd", "tester",callback);

Create Jasmine tests for the models

Should update the command history collection

Begin be

JAWK 

{ result: [ { a: "b" }, { a: "c" } ] } -> ["b", "c" ]

cmd | { var k = $input.result; k } | {{ $input.a }}   




pipe pipes the actual JSON around - use JS to extract

JSH - js shell files that can be get or posted to on the domain

Hosting
=========
.txt, .css, .html and .js, .json and .csv served directly
everything else served via cloudfront


Commands


Drop images 

// page 100%,500px
// library "d3"
// require "something.css"
// require "tester.js"
// require "something.js"


- Drag and drop files up
- simple REST api:

?apikey=keyname

POST or PUT to /home/username/directory/something.txt
GET /home/username/directory - user's home directory has to be secret
DELETE /home/username

POST /commands/mv argv[] argv[] argv[] - returns status + JSON

// Access to a DB
POST /db/username/somthing
GET /db/username/something



CLI - Backbone models, some client only based cones (clear), some server based (mv, ls)
These translate to commands that just hit /commands/ with a session-based API key

====

help
libraries
js - execute javascript on the command line in it's own ENV
ls
mkdir
cd
mv 
cp
edit - codemirror with regular binding
vi - codemirror with vi keybindings
style
run
public - make a directory public
private - make a directory private (not listable, but files are viewable online, default)
secret - make a directory only accessible via an API key
vsplit - split into two console, left and right
hsplit - split into two consoles, top and bottom
close - close this console 
source - source a JS file into ECMAsh
echo - same as echo
clear - clear screen
refresh / clear env - clear the environment
quit - quit the shell
zoom - zoom in
unzoom - zoom out
apikey - return my api key (apikey create|expire)

eventually, git, ftp, apis, etc


tutorial - start a tutorial

.ecmarc - file that will run ECMAsh commands when you login
- checkbox to 


Pipes?
REST endpoint? 

var Command = Backbone.Model.extend({

});


var History // list of commands, some which have been executed


var Result // result of a command - 

var InteractiveResult // iframe interactive result of something

var Editor //  



// user can create own client side commands
ECMAsh.addCommand(ClientCommand.extend({ 

});



